//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Viking.Types
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    [RuntimeConversation.TypeIdAttribute("c1292dd1-92bd-43a7-b444-d6db4c10d491")]
    public enum Character
    {
        
        [RuntimeConversation.EnumValueIdAttribute("b3113a30-4961-4d77-b437-cb8e38d2d9cf")]
        Player,
        
        [RuntimeConversation.EnumValueIdAttribute("ee8acee3-43a3-438e-a2b1-2a5dcd7adcb6")]
        Sif,
        
        [RuntimeConversation.EnumValueIdAttribute("b881e10a-a0e7-4758-8adb-2ceed3b73a93")]
        Eydis,
        
        [RuntimeConversation.EnumValueIdAttribute("c7ed3153-b5ee-48c1-a448-db1c1bad18f2")]
        Asleifr,
        
        [RuntimeConversation.EnumValueIdAttribute("28ece7dc-5d62-42e1-88e3-7f2c34bea288")]
        Ketill,
    }
    
    [RuntimeConversation.TypeIdAttribute("06060e9e-02a0-4ff1-b58f-abf1ea647723")]
    public enum Personality_Trait
    {
        
        [RuntimeConversation.EnumValueIdAttribute("998c5904-9ba1-4e02-ba76-ca2a1e5b32e8")]
        Honourable,
        
        [RuntimeConversation.EnumValueIdAttribute("662e8eab-1774-46e0-af32-db6567084f83")]
        Nidding,
        
        [RuntimeConversation.EnumValueIdAttribute("963fd59c-756d-4e31-836d-be34a5852c47")]
        OpenMinded,
        
        [RuntimeConversation.EnumValueIdAttribute("cab6e84e-04cf-4d6f-9aab-abe51d6cbe3c")]
        Conceited,
        
        [RuntimeConversation.EnumValueIdAttribute("b98168c2-506b-4941-9b55-bf47a0bcc975")]
        Superstitious,
        
        [RuntimeConversation.EnumValueIdAttribute("14efb3f3-ad73-4a9f-922b-0ad40bdc0f82")]
        Sceptical,
        
        [RuntimeConversation.EnumValueIdAttribute("417993b1-ce29-4b46-8c82-8c04c242cf34")]
        Aggressive,
        
        [RuntimeConversation.EnumValueIdAttribute("637fb252-b22e-46f3-891d-e560dc9126d7")]
        Peaceful,
        
        [RuntimeConversation.EnumValueIdAttribute("a3151427-d3ec-457c-a96a-4a16e830499c")]
        Courageous,
        
        [RuntimeConversation.EnumValueIdAttribute("2e18cd60-3f80-44e6-861e-33ad3e42e5ff")]
        Cautious,
        
        [RuntimeConversation.EnumValueIdAttribute("1a06b894-ad25-42dc-a2ab-1b31e78ee61c")]
        Altruistic,
        
        [RuntimeConversation.EnumValueIdAttribute("5673ec94-838f-49b3-9759-488c6190e2a4")]
        Greedy,
        
        [RuntimeConversation.EnumValueIdAttribute("7bbfbde6-34e0-462d-9844-32b6dee3c0bf")]
        Foresighted,
        
        [RuntimeConversation.EnumValueIdAttribute("137f95a4-b4f6-4181-9255-69733623a9f2")]
        DetailOriented,
        
        [RuntimeConversation.EnumValueIdAttribute("f00f4d82-d4f2-4343-b595-e255433301d7")]
        Cooperative,
        
        [RuntimeConversation.EnumValueIdAttribute("cf1debf0-3082-4921-94a6-81f88a858951")]
        Independent,
        
        [RuntimeConversation.EnumValueIdAttribute("e2a7a378-8143-41da-a084-008099a7961b")]
        Empathetic,
        
        [RuntimeConversation.EnumValueIdAttribute("09fa10a2-c5ce-42b7-9ddd-b34b7942c730")]
        Cynical,
        
        [RuntimeConversation.EnumValueIdAttribute("acbd5ab3-c862-4dcc-9641-13d28cda66a8")]
        Adventurous,
        
        [RuntimeConversation.EnumValueIdAttribute("3d7bddb4-003a-46ee-ac2f-5e600eaa15f6")]
        Narcissistic,
        
        [RuntimeConversation.EnumValueIdAttribute("371e2ee8-26e9-45fe-a8b2-8ef254b7ceba")]
        Stubborn,
        
        [RuntimeConversation.EnumValueIdAttribute("53544dc4-af86-4989-9a23-8f77c2ac08c0")]
        Diligent,
        
        [RuntimeConversation.EnumValueIdAttribute("5e503758-59a0-4f36-be9d-6337e1a11d19")]
        Cruel,
        
        [RuntimeConversation.EnumValueIdAttribute("8d2c9fe6-7a66-4658-9c34-6eeb2b206fc9")]
        Stoic,
        
        [RuntimeConversation.EnumValueIdAttribute("b0f602c2-d366-4423-8ce0-e70737478a2b")]
        Empty,
    }
    
    [RuntimeConversation.TypeIdAttribute("a621341f-d13e-4f10-9c0c-cf768b6aadbf")]
    public enum Emotion
    {
        
        [RuntimeConversation.EnumValueIdAttribute("bb5e1064-6563-4d1c-981d-892745360ca7")]
        Neutral,
        
        [RuntimeConversation.EnumValueIdAttribute("bc902a31-99ca-49e2-8092-c65847e6dd35")]
        FriendlyPleased,
        
        [RuntimeConversation.EnumValueIdAttribute("6a02c53a-8cba-471b-a751-e12b7ab84978")]
        Angry,
        
        [RuntimeConversation.EnumValueIdAttribute("0a2982e9-e7a9-4881-8611-cae866dee1d7")]
        NervousWorried,
        
        [RuntimeConversation.EnumValueIdAttribute("74b7210d-bd26-4f45-9c76-9eea3444d7b6")]
        Scared,
        
        [RuntimeConversation.EnumValueIdAttribute("2603486e-dc63-46ab-92dd-2ce3edc3188a")]
        Annoyed,
    }
    
    [RuntimeConversation.TypeIdAttribute("58dfb28e-86c7-4627-9494-8c42c0bec4fb")]
    public enum CameraTarget
    {
        
        [RuntimeConversation.EnumValueIdAttribute("42b4894d-a05c-46a6-883d-9a6aea44fca6")]
        Speaker,
        
        [RuntimeConversation.EnumValueIdAttribute("7d959a7c-4f39-4f1f-9c68-eab88166bf20")]
        Listener,
    }
    
    [RuntimeConversation.TypeIdAttribute("51ef0223-3574-4c0b-a01c-182a07e00b21")]
    public enum IntegerFlag
    {
        
        [RuntimeConversation.EnumValueIdAttribute("ca066421-bfa3-40bc-8e0a-03c819efca8d")]
        PartyKills,
    }
    
    [RuntimeConversation.TypeIdAttribute("16ebf380-6464-4dc1-b957-3ff5e32535f7")]
    public enum BooleanFlag
    {
        
        [RuntimeConversation.EnumValueIdAttribute("0ad076e0-41e4-4e6b-b5c8-fd64df2bd806")]
        _Dead,
    }
    
    [RuntimeConversation.TypeIdAttribute("ebfa534c-c036-407c-9c5f-4e63698dde87")]
    public enum Item
    {
        
        [RuntimeConversation.EnumValueIdAttribute("83c6b4e7-f53f-4d05-9139-3a9842190880")]
        Weapon,
    }
    
    [RuntimeConversation.TypeIdAttribute("030bf942-ca1b-4af6-9ede-3e084fb99177")]
    public enum CameraFraming
    {
        
        [RuntimeConversation.EnumValueIdAttribute("bb95b161-3163-46bd-a953-55501502e381")]
        Random,
        
        [RuntimeConversation.EnumValueIdAttribute("8ae42984-3ec0-496d-8ba9-d51ee739cb5a")]
        Close_Up_45,
        
        [RuntimeConversation.EnumValueIdAttribute("68664d91-26ad-48be-bb22-4968efc3a9f1")]
        Close_Up_Straight,
        
        [RuntimeConversation.EnumValueIdAttribute("73430f42-7f33-40f9-b5a1-b259146b01db")]
        Close_Up_Side,
        
        [RuntimeConversation.EnumValueIdAttribute("263e2151-b778-4070-a9b1-276c990ef337")]
        OTS_Close,
        
        [RuntimeConversation.EnumValueIdAttribute("78b3c26b-b42b-4376-9e5f-94fcb30bbbcc")]
        OTS_Medium,
        
        [RuntimeConversation.EnumValueIdAttribute("9597f223-d01a-4270-873a-8b9508664a7f")]
        OTS_Long,
        
        [RuntimeConversation.EnumValueIdAttribute("eca54faf-7cae-4d02-be3a-359461871683")]
        Side_Long,
        
        [RuntimeConversation.EnumValueIdAttribute("2fcc6412-08e2-4f6a-a47b-35075b071445")]
        Top_Down,
        
        [RuntimeConversation.EnumValueIdAttribute("edd6f840-24c9-4bae-b788-9036395d35cd")]
        Close_Up_Low,
        
        [RuntimeConversation.EnumValueIdAttribute("41ebdcea-70cb-4f71-a9c9-450f44efed3a")]
        Close_Up_High,
        
        [RuntimeConversation.EnumValueIdAttribute("6e62c25b-e35d-41f8-858d-b1a5f3bdbf35")]
        Side_Medium,
    }
    
    [RuntimeConversation.TypeIdAttribute("9be467f6-d921-4629-8785-772549c76091")]
    public enum CameraAnimation
    {
        
        [RuntimeConversation.EnumValueIdAttribute("02ad4376-d1a5-419e-9e7f-a2ae8582ecfd")]
        None,
        
        [RuntimeConversation.EnumValueIdAttribute("cb285c27-bdf4-4c07-ab26-a9e60475e40f")]
        Rotate_In,
        
        [RuntimeConversation.EnumValueIdAttribute("4c2ecd43-40e3-4eb8-8f00-5aebb8b88839")]
        Rotate_Out,
        
        [RuntimeConversation.EnumValueIdAttribute("f7325ca0-1051-41b2-9899-795468b56b2d")]
        Pan_In,
        
        [RuntimeConversation.EnumValueIdAttribute("39582f4a-7a0e-4974-a38b-b7bd2eb121b8")]
        Pan_Out,
        
        [RuntimeConversation.EnumValueIdAttribute("7d6add52-f441-4ca4-8013-e762175d9493")]
        Track_In,
        
        [RuntimeConversation.EnumValueIdAttribute("e0f7e418-e303-4a79-923b-f3e5d597f6d3")]
        Track_Out,
        
        [RuntimeConversation.EnumValueIdAttribute("536e0557-c81f-499c-8004-35dc4454bf16")]
        Ped_Up,
        
        [RuntimeConversation.EnumValueIdAttribute("4e682766-4565-424b-ac24-a74b0ca73496")]
        Ped_Down,
        
        [RuntimeConversation.EnumValueIdAttribute("998779e8-b3a3-4096-a28c-a1d546e758b3")]
        Tracking_Shot,
        
        [RuntimeConversation.EnumValueIdAttribute("1eb9d639-ba0e-4b24-b7c6-11ab61a2e079")]
        Reverse_Tracking_Shot,
    }
    
    [RuntimeConversation.TypeIdAttribute("a5d909aa-e7f5-40dc-8282-3f8148ada279")]
    public struct NonNegativeInteger
    {
        
        const int Max = 999999999;
        
        const int Min = 0;
        
        private int m_value;
        
public static implicit operator System.Int32(NonNegativeInteger value) { return value.m_value; }
        
        private NonNegativeInteger(int value)
        {
            this.m_value = value;
        }
        
        public static bool InRange(int value)
        {
            return ((value <= Max) 
                        && (value >= Min));
        }
        
        public static NonNegativeInteger FromValueClamped(int value)
        {
            if ((value > Max))
            {
                return new NonNegativeInteger(Max);
            }
            if ((value < Min))
            {
                return new NonNegativeInteger(Min);
            }
            return new NonNegativeInteger(value);
        }
        
        public static NonNegativeInteger FromValue(int value)
        {
            if ((value > Max))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be greater than Max in FromValue. Consider using FromValueClamped if" +
                        " clamping is desired");
            }
            if ((value < Min))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be less than Max in FromValue. Consider using FromValueClamped if cl" +
                        "amping is desired");
            }
            return new NonNegativeInteger(value);
        }
    }
    
    [RuntimeConversation.TypeIdAttribute("14070908-6bba-49f3-90fe-c2c884b1ad09")]
    public struct Time
    {
        
        const decimal Max = 999999999m;
        
        const decimal Min = 0m;
        
        private decimal m_value;
        
public static implicit operator System.Decimal(Time value) { return value.m_value; }
        
        private Time(decimal value)
        {
            this.m_value = value;
        }
        
        public static bool InRange(decimal value)
        {
            return ((value <= Max) 
                        && (value >= Min));
        }
        
        public static Time FromValueClamped(decimal value)
        {
            if ((value > Max))
            {
                return new Time(Max);
            }
            if ((value < Min))
            {
                return new Time(Min);
            }
            return new Time(value);
        }
        
        public static Time FromValue(decimal value)
        {
            if ((value > Max))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be greater than Max in FromValue. Consider using FromValueClamped if" +
                        " clamping is desired");
            }
            if ((value < Min))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be less than Max in FromValue. Consider using FromValueClamped if cl" +
                        "amping is desired");
            }
            return new Time(value);
        }
    }
    
    [RuntimeConversation.TypeIdAttribute("b339e8a9-19ab-44ff-8816-06776f62fc96")]
    public struct Angle
    {
        
        const decimal Max = 360m;
        
        const decimal Min = 0m;
        
        private decimal m_value;
        
public static implicit operator System.Decimal(Angle value) { return value.m_value; }
        
        private Angle(decimal value)
        {
            this.m_value = value;
        }
        
        public static bool InRange(decimal value)
        {
            return ((value <= Max) 
                        && (value >= Min));
        }
        
        public static Angle FromValueClamped(decimal value)
        {
            if ((value > Max))
            {
                return new Angle(Max);
            }
            if ((value < Min))
            {
                return new Angle(Min);
            }
            return new Angle(value);
        }
        
        public static Angle FromValue(decimal value)
        {
            if ((value > Max))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be greater than Max in FromValue. Consider using FromValueClamped if" +
                        " clamping is desired");
            }
            if ((value < Min))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be less than Max in FromValue. Consider using FromValueClamped if cl" +
                        "amping is desired");
            }
            return new Angle(value);
        }
    }
    
    [RuntimeConversation.TypeIdAttribute("53920eee-6266-4085-9b4f-67d35e202468")]
    public struct Percentage
    {
        
        const decimal Max = 100m;
        
        const decimal Min = 0m;
        
        private decimal m_value;
        
public static implicit operator System.Decimal(Percentage value) { return value.m_value; }
        
        private Percentage(decimal value)
        {
            this.m_value = value;
        }
        
        public static bool InRange(decimal value)
        {
            return ((value <= Max) 
                        && (value >= Min));
        }
        
        public static Percentage FromValueClamped(decimal value)
        {
            if ((value > Max))
            {
                return new Percentage(Max);
            }
            if ((value < Min))
            {
                return new Percentage(Min);
            }
            return new Percentage(value);
        }
        
        public static Percentage FromValue(decimal value)
        {
            if ((value > Max))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be greater than Max in FromValue. Consider using FromValueClamped if" +
                        " clamping is desired");
            }
            if ((value < Min))
            {
                throw new System.ArgumentOutOfRangeException("value cannot be less than Max in FromValue. Consider using FromValueClamped if cl" +
                        "amping is desired");
            }
            return new Percentage(value);
        }
    }
    
    [RuntimeConversation.TypeIdAttribute("d1d20f40-f63d-4465-acce-fcb33279c92e")]
    public enum Jump_IDs
    {
    }
    
    [RuntimeConversation.TypeIdAttribute("40f345e0-beef-43fc-a59a-a96c8c289139")]
    public enum LocalVars
    {
    }
    
    public class TypeDeserializer : RuntimeConversation.TypeDeserializerBase
    {
        
        public static void Deserialize(out Character a, string value)
        {
            if ("b3113a30-4961-4d77-b437-cb8e38d2d9cf".Equals(value))
            {
                a = Character.Player;
                return;
            }
            if ("ee8acee3-43a3-438e-a2b1-2a5dcd7adcb6".Equals(value))
            {
                a = Character.Sif;
                return;
            }
            if ("b881e10a-a0e7-4758-8adb-2ceed3b73a93".Equals(value))
            {
                a = Character.Eydis;
                return;
            }
            if ("c7ed3153-b5ee-48c1-a448-db1c1bad18f2".Equals(value))
            {
                a = Character.Asleifr;
                return;
            }
            if ("28ece7dc-5d62-42e1-88e3-7f2c34bea288".Equals(value))
            {
                a = Character.Ketill;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<Character> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<Character> result = new System.Collections.Generic.List<Character>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    Character v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<Character>(result);
        }
        
        public static void Deserialize(out Personality_Trait a, string value)
        {
            if ("998c5904-9ba1-4e02-ba76-ca2a1e5b32e8".Equals(value))
            {
                a = Personality_Trait.Honourable;
                return;
            }
            if ("662e8eab-1774-46e0-af32-db6567084f83".Equals(value))
            {
                a = Personality_Trait.Nidding;
                return;
            }
            if ("963fd59c-756d-4e31-836d-be34a5852c47".Equals(value))
            {
                a = Personality_Trait.OpenMinded;
                return;
            }
            if ("cab6e84e-04cf-4d6f-9aab-abe51d6cbe3c".Equals(value))
            {
                a = Personality_Trait.Conceited;
                return;
            }
            if ("b98168c2-506b-4941-9b55-bf47a0bcc975".Equals(value))
            {
                a = Personality_Trait.Superstitious;
                return;
            }
            if ("14efb3f3-ad73-4a9f-922b-0ad40bdc0f82".Equals(value))
            {
                a = Personality_Trait.Sceptical;
                return;
            }
            if ("417993b1-ce29-4b46-8c82-8c04c242cf34".Equals(value))
            {
                a = Personality_Trait.Aggressive;
                return;
            }
            if ("637fb252-b22e-46f3-891d-e560dc9126d7".Equals(value))
            {
                a = Personality_Trait.Peaceful;
                return;
            }
            if ("a3151427-d3ec-457c-a96a-4a16e830499c".Equals(value))
            {
                a = Personality_Trait.Courageous;
                return;
            }
            if ("2e18cd60-3f80-44e6-861e-33ad3e42e5ff".Equals(value))
            {
                a = Personality_Trait.Cautious;
                return;
            }
            if ("1a06b894-ad25-42dc-a2ab-1b31e78ee61c".Equals(value))
            {
                a = Personality_Trait.Altruistic;
                return;
            }
            if ("5673ec94-838f-49b3-9759-488c6190e2a4".Equals(value))
            {
                a = Personality_Trait.Greedy;
                return;
            }
            if ("7bbfbde6-34e0-462d-9844-32b6dee3c0bf".Equals(value))
            {
                a = Personality_Trait.Foresighted;
                return;
            }
            if ("137f95a4-b4f6-4181-9255-69733623a9f2".Equals(value))
            {
                a = Personality_Trait.DetailOriented;
                return;
            }
            if ("f00f4d82-d4f2-4343-b595-e255433301d7".Equals(value))
            {
                a = Personality_Trait.Cooperative;
                return;
            }
            if ("cf1debf0-3082-4921-94a6-81f88a858951".Equals(value))
            {
                a = Personality_Trait.Independent;
                return;
            }
            if ("e2a7a378-8143-41da-a084-008099a7961b".Equals(value))
            {
                a = Personality_Trait.Empathetic;
                return;
            }
            if ("09fa10a2-c5ce-42b7-9ddd-b34b7942c730".Equals(value))
            {
                a = Personality_Trait.Cynical;
                return;
            }
            if ("acbd5ab3-c862-4dcc-9641-13d28cda66a8".Equals(value))
            {
                a = Personality_Trait.Adventurous;
                return;
            }
            if ("3d7bddb4-003a-46ee-ac2f-5e600eaa15f6".Equals(value))
            {
                a = Personality_Trait.Narcissistic;
                return;
            }
            if ("371e2ee8-26e9-45fe-a8b2-8ef254b7ceba".Equals(value))
            {
                a = Personality_Trait.Stubborn;
                return;
            }
            if ("53544dc4-af86-4989-9a23-8f77c2ac08c0".Equals(value))
            {
                a = Personality_Trait.Diligent;
                return;
            }
            if ("5e503758-59a0-4f36-be9d-6337e1a11d19".Equals(value))
            {
                a = Personality_Trait.Cruel;
                return;
            }
            if ("8d2c9fe6-7a66-4658-9c34-6eeb2b206fc9".Equals(value))
            {
                a = Personality_Trait.Stoic;
                return;
            }
            if ("b0f602c2-d366-4423-8ce0-e70737478a2b".Equals(value))
            {
                a = Personality_Trait.Empty;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<Personality_Trait> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<Personality_Trait> result = new System.Collections.Generic.List<Personality_Trait>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    Personality_Trait v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<Personality_Trait>(result);
        }
        
        public static void Deserialize(out Emotion a, string value)
        {
            if ("bb5e1064-6563-4d1c-981d-892745360ca7".Equals(value))
            {
                a = Emotion.Neutral;
                return;
            }
            if ("bc902a31-99ca-49e2-8092-c65847e6dd35".Equals(value))
            {
                a = Emotion.FriendlyPleased;
                return;
            }
            if ("6a02c53a-8cba-471b-a751-e12b7ab84978".Equals(value))
            {
                a = Emotion.Angry;
                return;
            }
            if ("0a2982e9-e7a9-4881-8611-cae866dee1d7".Equals(value))
            {
                a = Emotion.NervousWorried;
                return;
            }
            if ("74b7210d-bd26-4f45-9c76-9eea3444d7b6".Equals(value))
            {
                a = Emotion.Scared;
                return;
            }
            if ("2603486e-dc63-46ab-92dd-2ce3edc3188a".Equals(value))
            {
                a = Emotion.Annoyed;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<Emotion> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<Emotion> result = new System.Collections.Generic.List<Emotion>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    Emotion v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<Emotion>(result);
        }
        
        public static void Deserialize(out CameraTarget a, string value)
        {
            if ("42b4894d-a05c-46a6-883d-9a6aea44fca6".Equals(value))
            {
                a = CameraTarget.Speaker;
                return;
            }
            if ("7d959a7c-4f39-4f1f-9c68-eab88166bf20".Equals(value))
            {
                a = CameraTarget.Listener;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<CameraTarget> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<CameraTarget> result = new System.Collections.Generic.List<CameraTarget>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    CameraTarget v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<CameraTarget>(result);
        }
        
        public static void Deserialize(out IntegerFlag a, string value)
        {
            if ("ca066421-bfa3-40bc-8e0a-03c819efca8d".Equals(value))
            {
                a = IntegerFlag.PartyKills;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<IntegerFlag> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<IntegerFlag> result = new System.Collections.Generic.List<IntegerFlag>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    IntegerFlag v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<IntegerFlag>(result);
        }
        
        public static void Deserialize(out BooleanFlag a, string value)
        {
            if ("0ad076e0-41e4-4e6b-b5c8-fd64df2bd806".Equals(value))
            {
                a = BooleanFlag._Dead;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<BooleanFlag> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<BooleanFlag> result = new System.Collections.Generic.List<BooleanFlag>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    BooleanFlag v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<BooleanFlag>(result);
        }
        
        public static void Deserialize(out Item a, string value)
        {
            if ("83c6b4e7-f53f-4d05-9139-3a9842190880".Equals(value))
            {
                a = Item.Weapon;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<Item> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<Item> result = new System.Collections.Generic.List<Item>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    Item v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<Item>(result);
        }
        
        public static void Deserialize(out CameraFraming a, string value)
        {
            if ("bb95b161-3163-46bd-a953-55501502e381".Equals(value))
            {
                a = CameraFraming.Random;
                return;
            }
            if ("8ae42984-3ec0-496d-8ba9-d51ee739cb5a".Equals(value))
            {
                a = CameraFraming.Close_Up_45;
                return;
            }
            if ("68664d91-26ad-48be-bb22-4968efc3a9f1".Equals(value))
            {
                a = CameraFraming.Close_Up_Straight;
                return;
            }
            if ("73430f42-7f33-40f9-b5a1-b259146b01db".Equals(value))
            {
                a = CameraFraming.Close_Up_Side;
                return;
            }
            if ("263e2151-b778-4070-a9b1-276c990ef337".Equals(value))
            {
                a = CameraFraming.OTS_Close;
                return;
            }
            if ("78b3c26b-b42b-4376-9e5f-94fcb30bbbcc".Equals(value))
            {
                a = CameraFraming.OTS_Medium;
                return;
            }
            if ("9597f223-d01a-4270-873a-8b9508664a7f".Equals(value))
            {
                a = CameraFraming.OTS_Long;
                return;
            }
            if ("eca54faf-7cae-4d02-be3a-359461871683".Equals(value))
            {
                a = CameraFraming.Side_Long;
                return;
            }
            if ("2fcc6412-08e2-4f6a-a47b-35075b071445".Equals(value))
            {
                a = CameraFraming.Top_Down;
                return;
            }
            if ("edd6f840-24c9-4bae-b788-9036395d35cd".Equals(value))
            {
                a = CameraFraming.Close_Up_Low;
                return;
            }
            if ("41ebdcea-70cb-4f71-a9c9-450f44efed3a".Equals(value))
            {
                a = CameraFraming.Close_Up_High;
                return;
            }
            if ("6e62c25b-e35d-41f8-858d-b1a5f3bdbf35".Equals(value))
            {
                a = CameraFraming.Side_Medium;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<CameraFraming> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<CameraFraming> result = new System.Collections.Generic.List<CameraFraming>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    CameraFraming v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<CameraFraming>(result);
        }
        
        public static void Deserialize(out CameraAnimation a, string value)
        {
            if ("02ad4376-d1a5-419e-9e7f-a2ae8582ecfd".Equals(value))
            {
                a = CameraAnimation.None;
                return;
            }
            if ("cb285c27-bdf4-4c07-ab26-a9e60475e40f".Equals(value))
            {
                a = CameraAnimation.Rotate_In;
                return;
            }
            if ("4c2ecd43-40e3-4eb8-8f00-5aebb8b88839".Equals(value))
            {
                a = CameraAnimation.Rotate_Out;
                return;
            }
            if ("f7325ca0-1051-41b2-9899-795468b56b2d".Equals(value))
            {
                a = CameraAnimation.Pan_In;
                return;
            }
            if ("39582f4a-7a0e-4974-a38b-b7bd2eb121b8".Equals(value))
            {
                a = CameraAnimation.Pan_Out;
                return;
            }
            if ("7d6add52-f441-4ca4-8013-e762175d9493".Equals(value))
            {
                a = CameraAnimation.Track_In;
                return;
            }
            if ("e0f7e418-e303-4a79-923b-f3e5d597f6d3".Equals(value))
            {
                a = CameraAnimation.Track_Out;
                return;
            }
            if ("536e0557-c81f-499c-8004-35dc4454bf16".Equals(value))
            {
                a = CameraAnimation.Ped_Up;
                return;
            }
            if ("4e682766-4565-424b-ac24-a74b0ca73496".Equals(value))
            {
                a = CameraAnimation.Ped_Down;
                return;
            }
            if ("998779e8-b3a3-4096-a28c-a1d546e758b3".Equals(value))
            {
                a = CameraAnimation.Tracking_Shot;
                return;
            }
            if ("1eb9d639-ba0e-4b24-b7c6-11ab61a2e079".Equals(value))
            {
                a = CameraAnimation.Reverse_Tracking_Shot;
                return;
            }
            a = 0;
        }
        
        public static void Deserialize(out Utilities.ReadonlySet<CameraAnimation> a, string value)
        {
            string[] values;
            values = value.Split('+');
            System.Collections.Generic.List<CameraAnimation> result = new System.Collections.Generic.List<CameraAnimation>();
            for (int i = 0; (i < values.Length); i = (i + 1))
            {
                string s = values[i];
                if ((s.Length > 0))
                {
                    CameraAnimation v;
                    Deserialize(out v, s);
                    result.Add(v);
                }
            }
            a = new Utilities.ReadonlySet<CameraAnimation>(result);
        }
        
        public static void Deserialize(out NonNegativeInteger a, string value)
        {
            a = NonNegativeInteger.FromValue(int.Parse(value));
        }
        
        public static void Deserialize(out Time a, string value)
        {
            a = Time.FromValue(decimal.Parse(value, System.Globalization.CultureInfo.InvariantCulture));
        }
        
        public static void Deserialize(out Angle a, string value)
        {
            a = Angle.FromValue(decimal.Parse(value, System.Globalization.CultureInfo.InvariantCulture));
        }
        
        public static void Deserialize(out Percentage a, string value)
        {
            a = Percentage.FromValue(decimal.Parse(value, System.Globalization.CultureInfo.InvariantCulture));
        }
        
        public static void Deserialize(out Jump_IDs a, string value)
        {
            a = ((Jump_IDs)(Enum.Parse(typeof(Jump_IDs), value)));
        }
        
        public static void Deserialize(out LocalVars a, string value)
        {
            a = ((LocalVars)(Enum.Parse(typeof(LocalVars), value)));
        }
    }
}
namespace Viking.Nodes.Connectors
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    public abstract class Connector : RuntimeConversation.ConnectorBase
    {
        
        private Node m_parent;
        
        private System.Collections.Generic.List<Connector> m_connections = new System.Collections.Generic.List<Connector>();
        
        public Connector(Node parent, Conversation.ID<Conversation.TConnector> id) : 
                base(id)
        {
            this.m_parent = parent;
        }
        
        public virtual Node Parent
        {
            get
            {
                return this.m_parent;
            }
        }
        
        public virtual System.Collections.Generic.List<Connector> Connections
        {
            get
            {
                return this.m_connections;
            }
        }
        
        public virtual void ConnectTo(Connector other)
        {
            this.m_connections.Add(other);
            other.m_connections.Add(this);
        }
    }
    
    [RuntimeConversation.ConnectorTypeIdAttribute("73e5cff2-7d6c-45e8-8f0e-08bcb780acc9")]
    public class Input : Connector
    {
        
        public Input(Node parent, Conversation.ID<Conversation.TConnector> id) : 
                base(parent, id)
        {
        }
    }
    
    [RuntimeConversation.ConnectorTypeIdAttribute("a800357f-5013-44c1-8637-c8a60cff240b")]
    public class Output : Connector
    {
        
        [RuntimeConversation.ParameterIdAttribute("ec0c0b5c-57d9-484b-8946-c8dcf3e09b38")]
        public String Name;
        
        public Output(Node parent, Conversation.ID<Conversation.TConnector> id, String Name) : 
                base(parent, id)
        {
            this.Name = Name;
        }
    }
}
namespace Viking.Nodes
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    public abstract class Node : RuntimeConversation.NodeBase
    {
        
        public Node(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
        }
        
        public override void Connect(Conversation.ID<Conversation.TConnector> thisConnectorID, RuntimeConversation.NodeBase other, Conversation.ID<Conversation.TConnector> otherConnectorID)
        {
            this.Connector(thisConnectorID).ConnectTo(((Node)(other)).Connector(otherConnectorID));
        }
        
        public abstract void Process(IProcessor processor);
        
        public abstract T Process<T>(IProcessor<T> processor)
        ;
        
        public abstract Connector Connector(Conversation.ID<Conversation.TConnector> connector);
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("196dc521-8336-4714-93b7-77ac09b3abd7")]
    public class NPC_Speech : Node
    {
        
        public Viking.Nodes.Connectors.Output id179fd9edc5654fb2bf3ebc562c27c940;
        
        public Viking.Nodes.Connectors.Input id2784a61493054bf6a9962d8a7e097866;
        
        [RuntimeConversation.ParameterIdAttribute("af08c7f7-33e9-4429-9e1f-cd786a73041b")]
        public Character Speaker;
        
        [RuntimeConversation.ParameterIdAttribute("507ed24d-3aa0-44e5-984c-22677f7ac8aa")]
        public Character Listener;
        
        [RuntimeConversation.ParameterIdAttribute("dba8a094-f51e-4432-9159-b5f764e7c3b2")]
        public Emotion Emotion;
        
        [RuntimeConversation.ParameterIdAttribute("ebfd4c15-c4ca-4b10-b10b-dffec08ffd96")]
        public RuntimeConversation.LocalizedString Description;
        
        [RuntimeConversation.ParameterIdAttribute("8987655a-92fe-4eca-8c50-8769a7edcf04")]
        public RuntimeConversation.LocalizedString Speech;
        
        public NPC_Speech(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _b55f6931855c4ec5b15f71dd0a7ef665;
            TypeDeserializer.Deserialize(out _b55f6931855c4ec5b15f71dd0a7ef665, "");
            this.id179fd9edc5654fb2bf3ebc562c27c940 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("179fd9ed-c565-4fb2-bf3e-bc562c27c940"), _b55f6931855c4ec5b15f71dd0a7ef665);
            this.id2784a61493054bf6a9962d8a7e097866 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("2784a614-9305-4bf6-a996-2d8a7e097866"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("179fd9ed-c565-4fb2-bf3e-bc562c27c940")))
            {
                return id179fd9edc5654fb2bf3ebc562c27c940;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("2784a614-9305-4bf6-a996-2d8a7e097866")))
            {
                return id2784a61493054bf6a9962d8a7e097866;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Speaker, GetParameter(parameters, new System.Guid("af08c7f7-33e9-4429-9e1f-cd786a73041b")));
            TypeDeserializer.Deserialize(out Listener, GetParameter(parameters, new System.Guid("507ed24d-3aa0-44e5-984c-22677f7ac8aa")));
            TypeDeserializer.Deserialize(out Emotion, GetParameter(parameters, new System.Guid("dba8a094-f51e-4432-9159-b5f764e7c3b2")));
            TypeDeserializer.Deserialize(out Description, GetParameter(parameters, new System.Guid("ebfd4c15-c4ca-4b10-b10b-dffec08ffd96")));
            TypeDeserializer.Deserialize(out Speech, GetParameter(parameters, new System.Guid("8987655a-92fe-4eca-8c50-8769a7edcf04")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("86524441-8da7-4e19-9ff3-c8df67e09f8f")]
    public class Option : Node
    {
        
        public Viking.Nodes.Connectors.Output id2fdfacb3fdb44c4f99a62fa7bc341c79;
        
        public Viking.Nodes.Connectors.Input idb579f35fa56a455ca971884f555d0a29;
        
        [RuntimeConversation.ParameterIdAttribute("05e42f73-2da9-4849-b9b0-feaeb82c6293")]
        public Utilities.ReadonlySet<Personality_Trait> Disapprove;
        
        [RuntimeConversation.ParameterIdAttribute("2c551592-0343-4909-b24b-fd27012cf0cf")]
        public Utilities.ReadonlySet<Personality_Trait> Approve;
        
        [RuntimeConversation.ParameterIdAttribute("b9950a3d-14d9-46d0-94dd-4217ed1573ad")]
        public RuntimeConversation.LocalizedString Choice_Text;
        
        [RuntimeConversation.ParameterIdAttribute("740c779d-c64a-4f58-abe3-a3a0419868a7")]
        public Boolean Action;
        
        public Option(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _078953510cd94acd938ee37c00ad1842;
            TypeDeserializer.Deserialize(out _078953510cd94acd938ee37c00ad1842, "");
            this.id2fdfacb3fdb44c4f99a62fa7bc341c79 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("2fdfacb3-fdb4-4c4f-99a6-2fa7bc341c79"), _078953510cd94acd938ee37c00ad1842);
            this.idb579f35fa56a455ca971884f555d0a29 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("b579f35f-a56a-455c-a971-884f555d0a29"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("2fdfacb3-fdb4-4c4f-99a6-2fa7bc341c79")))
            {
                return id2fdfacb3fdb44c4f99a62fa7bc341c79;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("b579f35f-a56a-455c-a971-884f555d0a29")))
            {
                return idb579f35fa56a455ca971884f555d0a29;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Disapprove, GetParameter(parameters, new System.Guid("05e42f73-2da9-4849-b9b0-feaeb82c6293")));
            TypeDeserializer.Deserialize(out Approve, GetParameter(parameters, new System.Guid("2c551592-0343-4909-b24b-fd27012cf0cf")));
            TypeDeserializer.Deserialize(out Choice_Text, GetParameter(parameters, new System.Guid("b9950a3d-14d9-46d0-94dd-4217ed1573ad")));
            TypeDeserializer.Deserialize(out Action, GetParameter(parameters, new System.Guid("740c779d-c64a-4f58-abe3-a3a0419868a7")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("656a48b2-324e-4484-a1b1-c3b91ad10c3e")]
    public class Start : Node
    {
        
        public Viking.Nodes.Connectors.Output idb5b1fe0305e14058aecb4012ae91db1f;
        
        public Start(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _ee8efd4a6f1149eb8b0d845993a98ff5;
            TypeDeserializer.Deserialize(out _ee8efd4a6f1149eb8b0d845993a98ff5, "");
            this.idb5b1fe0305e14058aecb4012ae91db1f = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("b5b1fe03-05e1-4058-aecb-4012ae91db1f"), _ee8efd4a6f1149eb8b0d845993a98ff5);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("b5b1fe03-05e1-4058-aecb-4012ae91db1f")))
            {
                return idb5b1fe0305e14058aecb4012ae91db1f;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("b2626790-c010-43d8-b1fb-d2093fd9328c")]
    public class Terminator : Node
    {
        
        public Viking.Nodes.Connectors.Input id1907c3b315a84ab2bb4ab89fd072a6a5;
        
        public Terminator(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.id1907c3b315a84ab2bb4ab89fd072a6a5 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("1907c3b3-15a8-4ab2-bb4a-b89fd072a6a5"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("1907c3b3-15a8-4ab2-bb4a-b89fd072a6a5")))
            {
                return id1907c3b315a84ab2bb4ab89fd072a6a5;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
}
namespace Viking.Nodes.Condition
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("df8c4ddb-616b-4481-b0bc-07eb8236f7fb")]
    public class Character_Alive : Node
    {
        
        public Viking.Nodes.Connectors.Output id94b73ca161054b84a505141a878e7494;
        
        public Viking.Nodes.Connectors.Output idbd570e148ca844c1a1e213d4252f8833;
        
        public Viking.Nodes.Connectors.Input idee1b251dacab476eb788efb1bd1c05c7;
        
        [RuntimeConversation.ParameterIdAttribute("afe33600-ec07-4a01-a4ed-76d278a5aa24")]
        public Character Character;
        
        public Character_Alive(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _745e7ec6a4e144148b000fb28a5ce79f;
            TypeDeserializer.Deserialize(out _745e7ec6a4e144148b000fb28a5ce79f, "Alive");
            this.id94b73ca161054b84a505141a878e7494 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("94b73ca1-6105-4b84-a505-141a878e7494"), _745e7ec6a4e144148b000fb28a5ce79f);
            String _1e83d17e759b42f682d0d721a68ef93f;
            TypeDeserializer.Deserialize(out _1e83d17e759b42f682d0d721a68ef93f, "Dead");
            this.idbd570e148ca844c1a1e213d4252f8833 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("bd570e14-8ca8-44c1-a1e2-13d4252f8833"), _1e83d17e759b42f682d0d721a68ef93f);
            this.idee1b251dacab476eb788efb1bd1c05c7 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("ee1b251d-acab-476e-b788-efb1bd1c05c7"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("94b73ca1-6105-4b84-a505-141a878e7494")))
            {
                return id94b73ca161054b84a505141a878e7494;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("bd570e14-8ca8-44c1-a1e2-13d4252f8833")))
            {
                return idbd570e148ca844c1a1e213d4252f8833;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("ee1b251d-acab-476e-b788-efb1bd1c05c7")))
            {
                return idee1b251dacab476eb788efb1bd1c05c7;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Character, GetParameter(parameters, new System.Guid("afe33600-ec07-4a01-a4ed-76d278a5aa24")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("0ff6290f-13da-4f7a-8584-9a3daa95fc23")]
    public class Check_Boolean : Node
    {
        
        public Viking.Nodes.Connectors.Output ida0b6ab3f1fd7404ca0f17416b1fbdb43;
        
        public Viking.Nodes.Connectors.Output idd20ba0d84a4d498f82c12938789a7196;
        
        [RuntimeConversation.ParameterIdAttribute("9fd6f445-9517-4b76-ad68-f8518d0199b3")]
        public BooleanFlag Flag;
        
        public Check_Boolean(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _1314fe3964bc4e73ae9e310f7e4bfca5;
            TypeDeserializer.Deserialize(out _1314fe3964bc4e73ae9e310f7e4bfca5, "True");
            this.ida0b6ab3f1fd7404ca0f17416b1fbdb43 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("a0b6ab3f-1fd7-404c-a0f1-7416b1fbdb43"), _1314fe3964bc4e73ae9e310f7e4bfca5);
            String _4d41e74dca13493cb07737da3202e1db;
            TypeDeserializer.Deserialize(out _4d41e74dca13493cb07737da3202e1db, "False");
            this.idd20ba0d84a4d498f82c12938789a7196 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("d20ba0d8-4a4d-498f-82c1-2938789a7196"), _4d41e74dca13493cb07737da3202e1db);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("a0b6ab3f-1fd7-404c-a0f1-7416b1fbdb43")))
            {
                return ida0b6ab3f1fd7404ca0f17416b1fbdb43;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("d20ba0d8-4a4d-498f-82c1-2938789a7196")))
            {
                return idd20ba0d84a4d498f82c12938789a7196;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Flag, GetParameter(parameters, new System.Guid("9fd6f445-9517-4b76-ad68-f8518d0199b3")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("08727d6a-da44-430b-8caf-a58cfdfe251c")]
    public class Check_Integer : Node
    {
        
        public Viking.Nodes.Connectors.Output idce18fc018b7e452e9cda7eec8bc16286;
        
        public Viking.Nodes.Connectors.Output id76aab09126b046f9b5ca11efd99b5da9;
        
        public Viking.Nodes.Connectors.Output id4947fa04ff924f5e81dceb38d73ba500;
        
        public Viking.Nodes.Connectors.Input idee53636aa7d847a7842547f88cc624aa;
        
        [RuntimeConversation.ParameterIdAttribute("7bc072f7-a8db-46ee-90c2-b6b4ed71dd68")]
        public Int32 Amount;
        
        [RuntimeConversation.ParameterIdAttribute("1785b9d2-80f9-4a5a-a553-50625ca31f3d")]
        public IntegerFlag Flag;
        
        public Check_Integer(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _23762c9bb6034303a6028a0d2a394f3a;
            TypeDeserializer.Deserialize(out _23762c9bb6034303a6028a0d2a394f3a, "Greater");
            this.idce18fc018b7e452e9cda7eec8bc16286 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("ce18fc01-8b7e-452e-9cda-7eec8bc16286"), _23762c9bb6034303a6028a0d2a394f3a);
            String _9af0f25ea01a4f4499f3eb622fcf803a;
            TypeDeserializer.Deserialize(out _9af0f25ea01a4f4499f3eb622fcf803a, "Less");
            this.id76aab09126b046f9b5ca11efd99b5da9 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("76aab091-26b0-46f9-b5ca-11efd99b5da9"), _9af0f25ea01a4f4499f3eb622fcf803a);
            String _882e24ead17e4c51b180aa5b2843b9d6;
            TypeDeserializer.Deserialize(out _882e24ead17e4c51b180aa5b2843b9d6, "Equal");
            this.id4947fa04ff924f5e81dceb38d73ba500 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("4947fa04-ff92-4f5e-81dc-eb38d73ba500"), _882e24ead17e4c51b180aa5b2843b9d6);
            this.idee53636aa7d847a7842547f88cc624aa = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("ee53636a-a7d8-47a7-8425-47f88cc624aa"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("ce18fc01-8b7e-452e-9cda-7eec8bc16286")))
            {
                return idce18fc018b7e452e9cda7eec8bc16286;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("76aab091-26b0-46f9-b5ca-11efd99b5da9")))
            {
                return id76aab09126b046f9b5ca11efd99b5da9;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("4947fa04-ff92-4f5e-81dc-eb38d73ba500")))
            {
                return id4947fa04ff924f5e81dceb38d73ba500;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("ee53636a-a7d8-47a7-8425-47f88cc624aa")))
            {
                return idee53636aa7d847a7842547f88cc624aa;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Amount, GetParameter(parameters, new System.Guid("7bc072f7-a8db-46ee-90c2-b6b4ed71dd68")));
            TypeDeserializer.Deserialize(out Flag, GetParameter(parameters, new System.Guid("1785b9d2-80f9-4a5a-a553-50625ca31f3d")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("e8a66001-6237-411a-830b-976477ee9701")]
    public class Character_Health : Node
    {
        
        public Viking.Nodes.Connectors.Output idf30b1a73ca5d4690b93688da62022af7;
        
        public Viking.Nodes.Connectors.Output id4cb88d40540a439899d0daf064f2b368;
        
        public Viking.Nodes.Connectors.Output id508041a1622143dd9f93ae5472f84315;
        
        public Viking.Nodes.Connectors.Input id36e21978b1a943b98d687be70965c3cd;
        
        [RuntimeConversation.ParameterIdAttribute("63d5290a-28b5-47f7-b0da-4ec650100b5e")]
        public Character Character;
        
        [RuntimeConversation.ParameterIdAttribute("beaac6ff-0de4-4af7-bb9c-2f581403247f")]
        public Percentage Percent;
        
        public Character_Health(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _314873d910fc495c8c99b1207e2ae29d;
            TypeDeserializer.Deserialize(out _314873d910fc495c8c99b1207e2ae29d, "Less");
            this.idf30b1a73ca5d4690b93688da62022af7 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("f30b1a73-ca5d-4690-b936-88da62022af7"), _314873d910fc495c8c99b1207e2ae29d);
            String _2ac0c957770942d282d9a0db840987bd;
            TypeDeserializer.Deserialize(out _2ac0c957770942d282d9a0db840987bd, "Equals");
            this.id4cb88d40540a439899d0daf064f2b368 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("4cb88d40-540a-4398-99d0-daf064f2b368"), _2ac0c957770942d282d9a0db840987bd);
            String _a83a54fdf8964ddda567b3e61533d8e8;
            TypeDeserializer.Deserialize(out _a83a54fdf8964ddda567b3e61533d8e8, "Greater");
            this.id508041a1622143dd9f93ae5472f84315 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("508041a1-6221-43dd-9f93-ae5472f84315"), _a83a54fdf8964ddda567b3e61533d8e8);
            this.id36e21978b1a943b98d687be70965c3cd = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("36e21978-b1a9-43b9-8d68-7be70965c3cd"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("f30b1a73-ca5d-4690-b936-88da62022af7")))
            {
                return idf30b1a73ca5d4690b93688da62022af7;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("4cb88d40-540a-4398-99d0-daf064f2b368")))
            {
                return id4cb88d40540a439899d0daf064f2b368;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("508041a1-6221-43dd-9f93-ae5472f84315")))
            {
                return id508041a1622143dd9f93ae5472f84315;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("36e21978-b1a9-43b9-8d68-7be70965c3cd")))
            {
                return id36e21978b1a943b98d687be70965c3cd;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Character, GetParameter(parameters, new System.Guid("63d5290a-28b5-47f7-b0da-4ec650100b5e")));
            TypeDeserializer.Deserialize(out Percent, GetParameter(parameters, new System.Guid("beaac6ff-0de4-4af7-bb9c-2f581403247f")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("f10f8ebc-616c-4061-be2d-4e392cd15396")]
    public class Player_Sex : Node
    {
        
        public Viking.Nodes.Connectors.Output id0988e9354ae1448abc7f79995462a368;
        
        public Viking.Nodes.Connectors.Output id8bb5e9bba4d6470a895fd006ee30034e;
        
        public Viking.Nodes.Connectors.Input id4f02fde216264045a0b0789efd769e79;
        
        public Player_Sex(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _55d05a296e974507a453d04e770d1208;
            TypeDeserializer.Deserialize(out _55d05a296e974507a453d04e770d1208, "Female");
            this.id0988e9354ae1448abc7f79995462a368 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("0988e935-4ae1-448a-bc7f-79995462a368"), _55d05a296e974507a453d04e770d1208);
            String _5a7cd485a3ed4125aff6d9499643e8e7;
            TypeDeserializer.Deserialize(out _5a7cd485a3ed4125aff6d9499643e8e7, "Male");
            this.id8bb5e9bba4d6470a895fd006ee30034e = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("8bb5e9bb-a4d6-470a-895f-d006ee30034e"), _5a7cd485a3ed4125aff6d9499643e8e7);
            this.id4f02fde216264045a0b0789efd769e79 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("4f02fde2-1626-4045-a0b0-789efd769e79"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("0988e935-4ae1-448a-bc7f-79995462a368")))
            {
                return id0988e9354ae1448abc7f79995462a368;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("8bb5e9bb-a4d6-470a-895f-d006ee30034e")))
            {
                return id8bb5e9bba4d6470a895fd006ee30034e;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("4f02fde2-1626-4045-a0b0-789efd769e79")))
            {
                return id4f02fde216264045a0b0789efd769e79;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("6f6392be-efaa-4e1a-9594-e4696c782067")]
    public class Player_Inventory : Node
    {
        
        public Viking.Nodes.Connectors.Output ida0b6ab3f1fd7404ca0f17416b1fbdb43;
        
        public Viking.Nodes.Connectors.Input id61943bf14e2f490495ab739e5738dd8b;
        
        public Viking.Nodes.Connectors.Output idd20ba0d84a4d498f82c12938789a7196;
        
        [RuntimeConversation.ParameterIdAttribute("e95f9349-68e8-4c3a-b18f-c8e0d643b207")]
        public Item Contains;
        
        public Player_Inventory(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _b90045ad877041aebfd49250fcb0396e;
            TypeDeserializer.Deserialize(out _b90045ad877041aebfd49250fcb0396e, "True");
            this.ida0b6ab3f1fd7404ca0f17416b1fbdb43 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("a0b6ab3f-1fd7-404c-a0f1-7416b1fbdb43"), _b90045ad877041aebfd49250fcb0396e);
            this.id61943bf14e2f490495ab739e5738dd8b = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("61943bf1-4e2f-4904-95ab-739e5738dd8b"));
            String _40ad14ef64784114a6e4fbd678259d12;
            TypeDeserializer.Deserialize(out _40ad14ef64784114a6e4fbd678259d12, "False");
            this.idd20ba0d84a4d498f82c12938789a7196 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("d20ba0d8-4a4d-498f-82c1-2938789a7196"), _40ad14ef64784114a6e4fbd678259d12);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("a0b6ab3f-1fd7-404c-a0f1-7416b1fbdb43")))
            {
                return ida0b6ab3f1fd7404ca0f17416b1fbdb43;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("61943bf1-4e2f-4904-95ab-739e5738dd8b")))
            {
                return id61943bf14e2f490495ab739e5738dd8b;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("d20ba0d8-4a4d-498f-82c1-2938789a7196")))
            {
                return idd20ba0d84a4d498f82c12938789a7196;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Contains, GetParameter(parameters, new System.Guid("e95f9349-68e8-4c3a-b18f-c8e0d643b207")));
        }
    }
}
namespace Viking.Nodes.Dev
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("3a0cf660-90d4-4e06-9d61-6769c3b93211")]
    public class TODO : Node
    {
        
        public Viking.Nodes.Connectors.Output id7a13cd196eb941aab94ba49107d8ba50;
        
        public Viking.Nodes.Connectors.Input id5e37d69b1d12487cb26f81aad52bfab4;
        
        [RuntimeConversation.ParameterIdAttribute("73bdecc0-8f41-42ed-853b-5b31ff623f15")]
        public String Description;
        
        public TODO(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _5601d44c812246ab81b11a47bd5402fe;
            TypeDeserializer.Deserialize(out _5601d44c812246ab81b11a47bd5402fe, "");
            this.id7a13cd196eb941aab94ba49107d8ba50 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("7a13cd19-6eb9-41aa-b94b-a49107d8ba50"), _5601d44c812246ab81b11a47bd5402fe);
            this.id5e37d69b1d12487cb26f81aad52bfab4 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("5e37d69b-1d12-487c-b26f-81aad52bfab4"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("7a13cd19-6eb9-41aa-b94b-a49107d8ba50")))
            {
                return id7a13cd196eb941aab94ba49107d8ba50;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("5e37d69b-1d12-487c-b26f-81aad52bfab4")))
            {
                return id5e37d69b1d12487cb26f81aad52bfab4;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Description, GetParameter(parameters, new System.Guid("73bdecc0-8f41-42ed-853b-5b31ff623f15")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("78589f5b-07f8-41d7-820a-318ec2989a40")]
    public class Error : Node
    {
        
        public Viking.Nodes.Connectors.Input id8ee7ec496e3b41a99c1e3d07473c666c;
        
        [RuntimeConversation.ParameterIdAttribute("a83ddc54-0696-4856-8d7d-dfb15953b5d9")]
        public String Message;
        
        public Error(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.id8ee7ec496e3b41a99c1e3d07473c666c = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("8ee7ec49-6e3b-41a9-9c1e-3d07473c666c"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("8ee7ec49-6e3b-41a9-9c1e-3d07473c666c")))
            {
                return id8ee7ec496e3b41a99c1e3d07473c666c;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Message, GetParameter(parameters, new System.Guid("a83ddc54-0696-4856-8d7d-dfb15953b5d9")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("28023421-4d83-486b-b4ac-7b820bd634c4")]
    public class Description : Node
    {
        
        public Viking.Nodes.Connectors.Output iddc59839e3fc6431394799ce9506a49ad;
        
        public Viking.Nodes.Connectors.Input ide6cfd63700004ea68a5c4f17c094ca37;
        
        [RuntimeConversation.ParameterIdAttribute("3be5b7bd-35b9-4dae-bea5-f60b10862276")]
        public String Description_;
        
        public Description(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _201309d785ef457e8114a7d402b81a85;
            TypeDeserializer.Deserialize(out _201309d785ef457e8114a7d402b81a85, "");
            this.iddc59839e3fc6431394799ce9506a49ad = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("dc59839e-3fc6-4313-9479-9ce9506a49ad"), _201309d785ef457e8114a7d402b81a85);
            this.ide6cfd63700004ea68a5c4f17c094ca37 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("e6cfd637-0000-4ea6-8a5c-4f17c094ca37"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("dc59839e-3fc6-4313-9479-9ce9506a49ad")))
            {
                return iddc59839e3fc6431394799ce9506a49ad;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("e6cfd637-0000-4ea6-8a5c-4f17c094ca37")))
            {
                return ide6cfd63700004ea68a5c4f17c094ca37;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Description_, GetParameter(parameters, new System.Guid("3be5b7bd-35b9-4dae-bea5-f60b10862276")));
        }
    }
}
namespace Viking.Nodes.Jumps
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("dd02c832-4896-4f25-9a49-3884d6146fa3")]
    public class Jump_To : Node
    {
        
        public Viking.Nodes.Connectors.Input ide04efd81ea02402f8b16f270f44daaf6;
        
        [RuntimeConversation.ParameterIdAttribute("70dea536-f654-40ec-a738-c1f0caec5d9e")]
        public Jump_IDs Target;
        
        public Jump_To(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.ide04efd81ea02402f8b16f270f44daaf6 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("e04efd81-ea02-402f-8b16-f270f44daaf6"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("e04efd81-ea02-402f-8b16-f270f44daaf6")))
            {
                return ide04efd81ea02402f8b16f270f44daaf6;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Target, GetParameter(parameters, new System.Guid("70dea536-f654-40ec-a738-c1f0caec5d9e")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("17cf0309-8377-4e3e-9d8d-46d0a7cef943")]
    public class Jump_Target : Node
    {
        
        public Viking.Nodes.Connectors.Output id41c4957558e347d9ad447e39df3ac7cc;
        
        [RuntimeConversation.ParameterIdAttribute("60d947e7-2fc8-4acb-8f00-9e590da242c6")]
        public Jump_IDs ID;
        
        public Jump_Target(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _f423828636b14f3aa230cddfe7ce56a5;
            TypeDeserializer.Deserialize(out _f423828636b14f3aa230cddfe7ce56a5, "");
            this.id41c4957558e347d9ad447e39df3ac7cc = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("41c49575-58e3-47d9-ad44-7e39df3ac7cc"), _f423828636b14f3aa230cddfe7ce56a5);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("41c49575-58e3-47d9-ad44-7e39df3ac7cc")))
            {
                return id41c4957558e347d9ad447e39df3ac7cc;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out ID, GetParameter(parameters, new System.Guid("60d947e7-2fc8-4acb-8f00-9e590da242c6")));
        }
    }
}
namespace Viking.Nodes.Metadata
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("d5974ffe-777b-419c-b9bc-bde980cb99a6")]
    public class Conversation_Info : Node
    {
        
        [RuntimeConversation.ParameterIdAttribute("64a44b9e-1dad-4f4d-b785-e90f8fd0f860")]
        public String Creator;
        
        [RuntimeConversation.ParameterIdAttribute("6940a618-5905-4e81-a59b-281d92a90782")]
        public String Context;
        
        [RuntimeConversation.ParameterIdAttribute("cb4a4ac9-a5e9-444f-a7b0-b8f15e31e77a")]
        public String Notes;
        
        [RuntimeConversation.ParameterIdAttribute("10fc350d-2c7e-430b-bf49-24f6b5580dca")]
        public Boolean Only_Play_Once;
        
        [RuntimeConversation.ParameterIdAttribute("15d39743-755c-4776-87a8-0f756593c074")]
        public Boolean Proximity_Triggered;
        
        public Conversation_Info(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Creator, GetParameter(parameters, new System.Guid("64a44b9e-1dad-4f4d-b785-e90f8fd0f860")));
            TypeDeserializer.Deserialize(out Context, GetParameter(parameters, new System.Guid("6940a618-5905-4e81-a59b-281d92a90782")));
            TypeDeserializer.Deserialize(out Notes, GetParameter(parameters, new System.Guid("cb4a4ac9-a5e9-444f-a7b0-b8f15e31e77a")));
            TypeDeserializer.Deserialize(out Only_Play_Once, GetParameter(parameters, new System.Guid("10fc350d-2c7e-430b-bf49-24f6b5580dca")));
            TypeDeserializer.Deserialize(out Proximity_Triggered, GetParameter(parameters, new System.Guid("15d39743-755c-4776-87a8-0f756593c074")));
        }
    }
}
namespace Viking.Nodes.Randomise
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("03f66e93-bc0c-4713-ae07-dd249d85078d")]
    public class Random : Node
    {
        
        public Viking.Nodes.Connectors.Output idd1517dc6b4e04487bfc92eed2d2f04cd;
        
        public Viking.Nodes.Connectors.Input id76652911e7494f08b5012ae0c09f77b3;
        
        public Random(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _f7880dd81bf94ef08ef578ca9a736b8f;
            TypeDeserializer.Deserialize(out _f7880dd81bf94ef08ef578ca9a736b8f, "");
            this.idd1517dc6b4e04487bfc92eed2d2f04cd = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("d1517dc6-b4e0-4487-bfc9-2eed2d2f04cd"), _f7880dd81bf94ef08ef578ca9a736b8f);
            this.id76652911e7494f08b5012ae0c09f77b3 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("76652911-e749-4f08-b501-2ae0c09f77b3"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("d1517dc6-b4e0-4487-bfc9-2eed2d2f04cd")))
            {
                return idd1517dc6b4e04487bfc92eed2d2f04cd;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("76652911-e749-4f08-b501-2ae0c09f77b3")))
            {
                return id76652911e7494f08b5012ae0c09f77b3;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("9c764213-48f0-4f68-acb4-cc416edc66ae")]
    public class Probability : Node
    {
        
        public Viking.Nodes.Connectors.Output id2b2c53380db74cc78403931b08f4a64b;
        
        public Viking.Nodes.Connectors.Output id2dea9f2bfefa4f60b82808e19d8a06ec;
        
        public Viking.Nodes.Connectors.Input id06803b592a0040ec89c2448e0937c38c;
        
        [RuntimeConversation.ParameterIdAttribute("914df4a8-e857-49d0-bf76-3bd9f6615193")]
        public Percentage Percent;
        
        public Probability(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _a0c64e2a460b4512bdf4be74090b82a6;
            TypeDeserializer.Deserialize(out _a0c64e2a460b4512bdf4be74090b82a6, "Success");
            this.id2b2c53380db74cc78403931b08f4a64b = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("2b2c5338-0db7-4cc7-8403-931b08f4a64b"), _a0c64e2a460b4512bdf4be74090b82a6);
            String _6f4c37ce201242a09525aa29fdf1285b;
            TypeDeserializer.Deserialize(out _6f4c37ce201242a09525aa29fdf1285b, "Failure");
            this.id2dea9f2bfefa4f60b82808e19d8a06ec = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("2dea9f2b-fefa-4f60-b828-08e19d8a06ec"), _6f4c37ce201242a09525aa29fdf1285b);
            this.id06803b592a0040ec89c2448e0937c38c = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("06803b59-2a00-40ec-89c2-448e0937c38c"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("2b2c5338-0db7-4cc7-8403-931b08f4a64b")))
            {
                return id2b2c53380db74cc78403931b08f4a64b;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("2dea9f2b-fefa-4f60-b828-08e19d8a06ec")))
            {
                return id2dea9f2bfefa4f60b82808e19d8a06ec;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("06803b59-2a00-40ec-89c2-448e0937c38c")))
            {
                return id06803b592a0040ec89c2448e0937c38c;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Percent, GetParameter(parameters, new System.Guid("914df4a8-e857-49d0-bf76-3bd9f6615193")));
        }
    }
}
namespace Viking.Nodes.Trigger
{
    using Viking.Nodes.Connectors;
    using System;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using Viking.Types;
    
    
    [RuntimeConversation.NodeTypeIdAttribute("4e0b5433-898b-42cf-989f-dd1adc7efd87")]
    public class Exit_Dialogue : Node
    {
        
        public Viking.Nodes.Connectors.Input idc3b4c2e2f43d42eabde566b1bfda29f5;
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        public Exit_Dialogue(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.idc3b4c2e2f43d42eabde566b1bfda29f5 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("c3b4c2e2-f43d-42ea-bde5-66b1bfda29f5"));
            String _441e9c535f3c466b8606bc93f9e396d2;
            TypeDeserializer.Deserialize(out _441e9c535f3c466b8606bc93f9e396d2, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _441e9c535f3c466b8606bc93f9e396d2);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("c3b4c2e2-f43d-42ea-bde5-66b1bfda29f5")))
            {
                return idc3b4c2e2f43d42eabde566b1bfda29f5;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("0bd4f09f-702a-4ae3-a801-38493653be5d")]
    public class Enter_Dialogue : Node
    {
        
        public Viking.Nodes.Connectors.Input idb432e72c724c4d73bcf12c24148e9568;
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        public Enter_Dialogue(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.idb432e72c724c4d73bcf12c24148e9568 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("b432e72c-724c-4d73-bcf1-2c24148e9568"));
            String _6887a9c5207a441380b1e5e25cbee101;
            TypeDeserializer.Deserialize(out _6887a9c5207a441380b1e5e25cbee101, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _6887a9c5207a441380b1e5e25cbee101);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("b432e72c-724c-4d73-bcf1-2c24148e9568")))
            {
                return idb432e72c724c4d73bcf12c24148e9568;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("00b12526-aa16-4258-95b5-fd1e9927c271")]
    public class Increment_Integer : Node
    {
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        public Viking.Nodes.Connectors.Input id7710fc42fc43454b8288838a06fbc8b9;
        
        [RuntimeConversation.ParameterIdAttribute("015fc115-b8a5-4cd5-8f41-6c13a8b77643")]
        public IntegerFlag Flag;
        
        [RuntimeConversation.ParameterIdAttribute("e3e1497f-bd0c-468e-aadd-8db9ed593700")]
        public Int32 By;
        
        public Increment_Integer(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _4cc24fa8a6e34235afa7d93176dab6c1;
            TypeDeserializer.Deserialize(out _4cc24fa8a6e34235afa7d93176dab6c1, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _4cc24fa8a6e34235afa7d93176dab6c1);
            this.id7710fc42fc43454b8288838a06fbc8b9 = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("7710fc42-fc43-454b-8288-838a06fbc8b9"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("7710fc42-fc43-454b-8288-838a06fbc8b9")))
            {
                return id7710fc42fc43454b8288838a06fbc8b9;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Flag, GetParameter(parameters, new System.Guid("015fc115-b8a5-4cd5-8f41-6c13a8b77643")));
            TypeDeserializer.Deserialize(out By, GetParameter(parameters, new System.Guid("e3e1497f-bd0c-468e-aadd-8db9ed593700")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("78c38356-d036-418c-be97-b757e4792c4a")]
    public class Set_Boolean : Node
    {
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        public Viking.Nodes.Connectors.Input idd1d99b283eb14386a8c6f4ba664040ee;
        
        [RuntimeConversation.ParameterIdAttribute("32fad20d-6ca6-4fc3-8c7a-e3a3cd84061b")]
        public Boolean Value;
        
        [RuntimeConversation.ParameterIdAttribute("70ce28d8-9284-4bab-8bb7-47ef421a18dd")]
        public BooleanFlag Flag;
        
        public Set_Boolean(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _f0ed9ea043614f719387406e3a5d476f;
            TypeDeserializer.Deserialize(out _f0ed9ea043614f719387406e3a5d476f, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _f0ed9ea043614f719387406e3a5d476f);
            this.idd1d99b283eb14386a8c6f4ba664040ee = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("d1d99b28-3eb1-4386-a8c6-f4ba664040ee"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("d1d99b28-3eb1-4386-a8c6-f4ba664040ee")))
            {
                return idd1d99b283eb14386a8c6f4ba664040ee;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Value, GetParameter(parameters, new System.Guid("32fad20d-6ca6-4fc3-8c7a-e3a3cd84061b")));
            TypeDeserializer.Deserialize(out Flag, GetParameter(parameters, new System.Guid("70ce28d8-9284-4bab-8bb7-47ef421a18dd")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("7adc2a07-f50e-439a-bca4-58aa80ed24b1")]
    public class Set_Integer : Node
    {
        
        public Viking.Nodes.Connectors.Input id9a358db500e245d4934d7b1dd059f89b;
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        [RuntimeConversation.ParameterIdAttribute("490c4c46-d25a-4605-99cd-237b94679e95")]
        public Int32 Value;
        
        [RuntimeConversation.ParameterIdAttribute("b30054dd-f984-41a7-b245-aaed6bac39f8")]
        public IntegerFlag Flag;
        
        public Set_Integer(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            this.id9a358db500e245d4934d7b1dd059f89b = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("9a358db5-00e2-45d4-934d-7b1dd059f89b"));
            String _9ddf708611e7419bb82bcb0f94abebc7;
            TypeDeserializer.Deserialize(out _9ddf708611e7419bb82bcb0f94abebc7, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _9ddf708611e7419bb82bcb0f94abebc7);
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("9a358db5-00e2-45d4-934d-7b1dd059f89b")))
            {
                return id9a358db500e245d4934d7b1dd059f89b;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out Value, GetParameter(parameters, new System.Guid("490c4c46-d25a-4605-99cd-237b94679e95")));
            TypeDeserializer.Deserialize(out Flag, GetParameter(parameters, new System.Guid("b30054dd-f984-41a7-b245-aaed6bac39f8")));
        }
    }
    
    [RuntimeConversation.NodeTypeIdAttribute("9c4a1f4c-7313-46a1-bb46-d5b4131549aa")]
    public class Give_Item : Node
    {
        
        public Viking.Nodes.Connectors.Output id3dee23b1b1a04457b2f736fdfe67cdf2;
        
        public Viking.Nodes.Connectors.Input id4264c31346ac4abba19d628d5572f67d;
        
        [RuntimeConversation.ParameterIdAttribute("8b323b83-0e96-4442-89b9-f031c842c051")]
        public Character To;
        
        [RuntimeConversation.ParameterIdAttribute("eaebb3c0-805e-4cd7-b5e6-93912bbdb9b7")]
        public Int32 Amount;
        
        [RuntimeConversation.ParameterIdAttribute("578f6dbd-a218-462e-8ec4-fc5a7c96db7d")]
        public Item Object;
        
        public Give_Item(Conversation.ID<Conversation.NodeTemp> id, System.Drawing.PointF position) : 
                base(id, position)
        {
            String _3e60e4cbea9d416296ae1abc75b1834d;
            TypeDeserializer.Deserialize(out _3e60e4cbea9d416296ae1abc75b1834d, "");
            this.id3dee23b1b1a04457b2f736fdfe67cdf2 = new Viking.Nodes.Connectors.Output(this, Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2"), _3e60e4cbea9d416296ae1abc75b1834d);
            this.id4264c31346ac4abba19d628d5572f67d = new Viking.Nodes.Connectors.Input(this, Conversation.ID<Conversation.TConnector>.Parse("4264c313-46ac-4abb-a19d-628d5572f67d"));
        }
        
        public override Connector Connector(Conversation.ID<Conversation.TConnector> connector)
        {
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("3dee23b1-b1a0-4457-b2f7-36fdfe67cdf2")))
            {
                return id3dee23b1b1a04457b2f736fdfe67cdf2;
            }
            if (connector.Equals(Conversation.ID<Conversation.TConnector>.Parse("4264c313-46ac-4abb-a19d-628d5572f67d")))
            {
                return id4264c31346ac4abba19d628d5572f67d;
            }
            return null;
        }
        
        public override void Process(IProcessor processor)
        {
            processor.ProcessNode(this);
        }
        
        public override T Process<T>(IProcessor<T> processor)
        
        {
            return processor.ProcessNode(this);
        }

        public virtual void GetParameters(System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters)
        {
            TypeDeserializer.Deserialize(out To, GetParameter(parameters, new System.Guid("8b323b83-0e96-4442-89b9-f031c842c051")));
            TypeDeserializer.Deserialize(out Amount, GetParameter(parameters, new System.Guid("eaebb3c0-805e-4cd7-b5e6-93912bbdb9b7")));
            TypeDeserializer.Deserialize(out Object, GetParameter(parameters, new System.Guid("578f6dbd-a218-462e-8ec4-fc5a7c96db7d")));
        }
    }
}
namespace Viking
{
    using Viking.Types;
    using Viking.Nodes.Connectors;
    using Viking.Nodes;
    using Viking.Nodes.Condition;
    using Viking.Nodes.Dev;
    using Viking.Nodes.Jumps;
    using Viking.Nodes.Metadata;
    using Viking.Nodes.Randomise;
    using Viking.Nodes.Trigger;
    
    
    public class Deserializer : Utilities.IDeserializer<RuntimeConversation.Conversation>
    {
        
        public virtual RuntimeConversation.Conversation Read(System.IO.Stream stream)
        {
            RuntimeConversation.CustomDeserializer backend = new RuntimeConversation.CustomDeserializer(GetNode);
            return backend.Read(stream);
        }

        private Utilities.Or<RuntimeConversation.NodeBase, Conversation.Serialization.LoadError> GetNode(Conversation.ID<Conversation.NodeTypeTemp> typeid, Conversation.ID<Conversation.NodeTemp> id, System.Collections.Generic.IEnumerable<RuntimeConversation.CustomDeserializerParameter> parameters, System.Drawing.PointF position)
        {
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("196dc521-8336-4714-93b7-77ac09b3abd7")))
            {
                Viking.Nodes.NPC_Speech node = new Viking.Nodes.NPC_Speech(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("df8c4ddb-616b-4481-b0bc-07eb8236f7fb")))
            {
                Viking.Nodes.Condition.Character_Alive node = new Viking.Nodes.Condition.Character_Alive(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("0ff6290f-13da-4f7a-8584-9a3daa95fc23")))
            {
                Viking.Nodes.Condition.Check_Boolean node = new Viking.Nodes.Condition.Check_Boolean(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("08727d6a-da44-430b-8caf-a58cfdfe251c")))
            {
                Viking.Nodes.Condition.Check_Integer node = new Viking.Nodes.Condition.Check_Integer(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("e8a66001-6237-411a-830b-976477ee9701")))
            {
                Viking.Nodes.Condition.Character_Health node = new Viking.Nodes.Condition.Character_Health(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("f10f8ebc-616c-4061-be2d-4e392cd15396")))
            {
                Viking.Nodes.Condition.Player_Sex node = new Viking.Nodes.Condition.Player_Sex(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("6f6392be-efaa-4e1a-9594-e4696c782067")))
            {
                Viking.Nodes.Condition.Player_Inventory node = new Viking.Nodes.Condition.Player_Inventory(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("3a0cf660-90d4-4e06-9d61-6769c3b93211")))
            {
                Viking.Nodes.Dev.TODO node = new Viking.Nodes.Dev.TODO(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("78589f5b-07f8-41d7-820a-318ec2989a40")))
            {
                Viking.Nodes.Dev.Error node = new Viking.Nodes.Dev.Error(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("28023421-4d83-486b-b4ac-7b820bd634c4")))
            {
                Viking.Nodes.Dev.Description node = new Viking.Nodes.Dev.Description(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("dd02c832-4896-4f25-9a49-3884d6146fa3")))
            {
                Viking.Nodes.Jumps.Jump_To node = new Viking.Nodes.Jumps.Jump_To(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("17cf0309-8377-4e3e-9d8d-46d0a7cef943")))
            {
                Viking.Nodes.Jumps.Jump_Target node = new Viking.Nodes.Jumps.Jump_Target(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("d5974ffe-777b-419c-b9bc-bde980cb99a6")))
            {
                Viking.Nodes.Metadata.Conversation_Info node = new Viking.Nodes.Metadata.Conversation_Info(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("86524441-8da7-4e19-9ff3-c8df67e09f8f")))
            {
                Viking.Nodes.Option node = new Viking.Nodes.Option(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("03f66e93-bc0c-4713-ae07-dd249d85078d")))
            {
                Viking.Nodes.Randomise.Random node = new Viking.Nodes.Randomise.Random(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("9c764213-48f0-4f68-acb4-cc416edc66ae")))
            {
                Viking.Nodes.Randomise.Probability node = new Viking.Nodes.Randomise.Probability(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("656a48b2-324e-4484-a1b1-c3b91ad10c3e")))
            {
                Viking.Nodes.Start node = new Viking.Nodes.Start(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("b2626790-c010-43d8-b1fb-d2093fd9328c")))
            {
                Viking.Nodes.Terminator node = new Viking.Nodes.Terminator(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("4e0b5433-898b-42cf-989f-dd1adc7efd87")))
            {
                Viking.Nodes.Trigger.Exit_Dialogue node = new Viking.Nodes.Trigger.Exit_Dialogue(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("0bd4f09f-702a-4ae3-a801-38493653be5d")))
            {
                Viking.Nodes.Trigger.Enter_Dialogue node = new Viking.Nodes.Trigger.Enter_Dialogue(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("00b12526-aa16-4258-95b5-fd1e9927c271")))
            {
                Viking.Nodes.Trigger.Increment_Integer node = new Viking.Nodes.Trigger.Increment_Integer(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("78c38356-d036-418c-be97-b757e4792c4a")))
            {
                Viking.Nodes.Trigger.Set_Boolean node = new Viking.Nodes.Trigger.Set_Boolean(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("7adc2a07-f50e-439a-bca4-58aa80ed24b1")))
            {
                Viking.Nodes.Trigger.Set_Integer node = new Viking.Nodes.Trigger.Set_Integer(id, position);
                node.GetParameters(parameters);
                return node;
            }
            if (typeid.Equals(Conversation.ID<Conversation.NodeTypeTemp>.Parse("9c4a1f4c-7313-46a1-bb46-d5b4131549aa")))
            {
                Viking.Nodes.Trigger.Give_Item node = new Viking.Nodes.Trigger.Give_Item(id, position);
                node.GetParameters(parameters);
                return node;
            }
            return new Conversation.Serialization.LoadError("Failed to create node");
        }
    }
    
    public interface IProcessor
    {
        
        void ProcessNode(Viking.Nodes.NPC_Speech node);
        
        void ProcessNode(Viking.Nodes.Condition.Character_Alive node);
        
        void ProcessNode(Viking.Nodes.Condition.Check_Boolean node);
        
        void ProcessNode(Viking.Nodes.Condition.Check_Integer node);
        
        void ProcessNode(Viking.Nodes.Condition.Character_Health node);
        
        void ProcessNode(Viking.Nodes.Condition.Player_Sex node);
        
        void ProcessNode(Viking.Nodes.Condition.Player_Inventory node);
        
        void ProcessNode(Viking.Nodes.Dev.TODO node);
        
        void ProcessNode(Viking.Nodes.Dev.Error node);
        
        void ProcessNode(Viking.Nodes.Dev.Description node);
        
        void ProcessNode(Viking.Nodes.Jumps.Jump_To node);
        
        void ProcessNode(Viking.Nodes.Jumps.Jump_Target node);
        
        void ProcessNode(Viking.Nodes.Metadata.Conversation_Info node);
        
        void ProcessNode(Viking.Nodes.Option node);
        
        void ProcessNode(Viking.Nodes.Randomise.Random node);
        
        void ProcessNode(Viking.Nodes.Randomise.Probability node);
        
        void ProcessNode(Viking.Nodes.Start node);
        
        void ProcessNode(Viking.Nodes.Terminator node);
        
        void ProcessNode(Viking.Nodes.Trigger.Exit_Dialogue node);
        
        void ProcessNode(Viking.Nodes.Trigger.Enter_Dialogue node);
        
        void ProcessNode(Viking.Nodes.Trigger.Increment_Integer node);
        
        void ProcessNode(Viking.Nodes.Trigger.Set_Boolean node);
        
        void ProcessNode(Viking.Nodes.Trigger.Set_Integer node);
        
        void ProcessNode(Viking.Nodes.Trigger.Give_Item node);
    }
    
    public interface IProcessor<T>
    
    {
        
        T ProcessNode(Viking.Nodes.NPC_Speech node);
        
        T ProcessNode(Viking.Nodes.Condition.Character_Alive node);
        
        T ProcessNode(Viking.Nodes.Condition.Check_Boolean node);
        
        T ProcessNode(Viking.Nodes.Condition.Check_Integer node);
        
        T ProcessNode(Viking.Nodes.Condition.Character_Health node);
        
        T ProcessNode(Viking.Nodes.Condition.Player_Sex node);
        
        T ProcessNode(Viking.Nodes.Condition.Player_Inventory node);
        
        T ProcessNode(Viking.Nodes.Dev.TODO node);
        
        T ProcessNode(Viking.Nodes.Dev.Error node);
        
        T ProcessNode(Viking.Nodes.Dev.Description node);
        
        T ProcessNode(Viking.Nodes.Jumps.Jump_To node);
        
        T ProcessNode(Viking.Nodes.Jumps.Jump_Target node);
        
        T ProcessNode(Viking.Nodes.Metadata.Conversation_Info node);
        
        T ProcessNode(Viking.Nodes.Option node);
        
        T ProcessNode(Viking.Nodes.Randomise.Random node);
        
        T ProcessNode(Viking.Nodes.Randomise.Probability node);
        
        T ProcessNode(Viking.Nodes.Start node);
        
        T ProcessNode(Viking.Nodes.Terminator node);
        
        T ProcessNode(Viking.Nodes.Trigger.Exit_Dialogue node);
        
        T ProcessNode(Viking.Nodes.Trigger.Enter_Dialogue node);
        
        T ProcessNode(Viking.Nodes.Trigger.Increment_Integer node);
        
        T ProcessNode(Viking.Nodes.Trigger.Set_Boolean node);
        
        T ProcessNode(Viking.Nodes.Trigger.Set_Integer node);
        
        T ProcessNode(Viking.Nodes.Trigger.Give_Item node);
    }
}
